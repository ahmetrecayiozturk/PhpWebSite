# Bilet Satın Alma Platformu — Hızlı Kurulum & Gerekli Komutlar

Bu README, uygulamayı "ilk defa açacak" kişilerin ihtiyaç duyacağı kesin ve çalıştırılabilir komutları içerir (Windows PowerShell ve Unix/bash için ayrı satırlar). Burada anlatılanların hepsi geliştirici (development) amaçlıdır — üretime taşırken güvenlik ayarlarını (display_errors kapatma, hassas log temizleme, gerçek ödeme entegrasyonu vs.) uygulayın.

Özet: yapılacak ana adımlar
1. Gerekli yazılımları kontrol et (PHP, sqlite3, Docker isteğe bağlı)
2. Veritabanını oluştur (db.sql)
3. Gerekli migration’ları çalıştır (transactions tablosu + unique index)
4. Test admin ve kullanıcı parolalarını güvenli şekilde ayarla
5. Test bakiye yükle / bakiye verme komutları
6. Uygulamayı çalıştır (PHP built-in veya Docker)
7. Hata/günlük izleme ve temel debug komutları

Aşağıdaki komutları tam olarak kopyala-yapıştır ile çalıştırabilirsiniz.

Gereksinimler kontrolü
- PHP (CLI) ve pdo_sqlite extension:
  - Windows PowerShell:
    ```powershell
    php -v
    php -m | Select-String -Pattern sqlite
    ```
  - Unix / macOS:
    ```bash
    php -v
    php -m | grep -i sqlite || true
    ```
  Beklenen çıktı: PHP versiyon ve `pdo_sqlite` ya da `sqlite3` modülleri listelenmeli.

- sqlite3 CLI:
  - Windows: proje köküne `sqlite3.exe` koyduysanız:
    ```powershell
    .\sqlite3.exe -version
    ```
  - Unix:
    ```bash
    sqlite3 --version
    ```

1) db.sqlite oluşturma (db.sql'den)
- Eğer repoda `db.sql` varsa, db.sqlite oluştur:
  - Windows PowerShell:
    ```powershell
    # proje kökünde çalıştır
    .\sqlite3.exe db.sqlite ".read db.sql"
    ```
  - Unix / macOS:
    ```bash
    sqlite3 db.sqlite ".read db.sql"
    ```
  - Alternatif (bash):
    ```bash
    sqlite3 db.sqlite < db.sql
    ```

2) Gerekli migration'ları (tek satırla çalıştırılabilir)
- `transactions` tablosu (kayıt tutmak için) ve `ux_biletler_sefer_koltuk_aktif` index'i (aynı koltuğun iki kere satılmasını engellemek için):

  - Windows PowerShell:
    ```powershell
    .\sqlite3.exe db.sqlite "CREATE TABLE IF NOT EXISTS transactions (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER NOT NULL, amount REAL NOT NULL, type TEXT NOT NULL, reference TEXT, created_at DATETIME DEFAULT (datetime('now')));"
    .\sqlite3.exe db.sqlite "CREATE UNIQUE INDEX IF NOT EXISTS ux_biletler_sefer_koltuk_aktif ON biletler (sefer_id, koltuk_no) WHERE durum='aktif';"
    ```

  - Unix / macOS:
    ```bash
    sqlite3 db.sqlite "CREATE TABLE IF NOT EXISTS transactions (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER NOT NULL, amount REAL NOT NULL, type TEXT NOT NULL, reference TEXT, created_at DATETIME DEFAULT (datetime('now')));"
    sqlite3 db.sqlite "CREATE UNIQUE INDEX IF NOT EXISTS ux_biletler_sefer_koltuk_aktif ON biletler (sefer_id, koltuk_no) WHERE durum='aktif';"
    ```

3) Kullanıcı parolalarını güvenli şekilde (hash ile) ayarlama
- (Güvenli) PHP script kullanarak bir kullanıcının parolasını set etmek için repo köküne `set_password.php` koy (aşağıdaki içeriği bir dosyaya yapıştır):
  - set_password.php (örnek içeriği daha önce verildi). Çalıştırma:
    - PowerShell / Unix:
      ```powershell
      php set_password.php admin_general admin123
      ```
  - Hızlı tek-liner (sadece hash üretip ekrana basmak istersen):
    ```powershell
    php -r "echo password_hash('admin123', PASSWORD_DEFAULT).PHP_EOL;"
    ```
  - Eğer sqlite3 shell ile doğrudan UPDATE yapacaksan, hash'i tek tırnak içinde eklemeye dikkat et:
    - Windows PowerShell:
      ```powershell
      $h = php -r "echo password_hash('admin123', PASSWORD_DEFAULT).PHP_EOL;"
      .\sqlite3.exe db.sqlite "UPDATE users SET password='$h' WHERE username='admin_general';"
      ```
    - (Not: PowerShell tek tırnak/double-quote kaçışına dikkat et; set_password.php daha güvenlidir.)

4) Örnek / başlangıç kullanıcı, sefer ve test verileri (opsiyonel)
- Hızlı test verisi eklemek istersen (örnek SQL):
  - Windows PowerShell / Unix:
    ```sql
    INSERT INTO users (username, password, role, credit) VALUES ('a', 'plain_or_hash_here', 'user', 0.0);
    INSERT INTO users (username, password, role, credit) VALUES ('admin_general', 'PLACEHOLDER_HASH', 'admin', 0.0);
    INSERT INTO firmas (name) VALUES ('Firma A');
    INSERT INTO sefers (firma_id, kalkis, varis, tarih, saat, fiyat, koltuk_sayisi) VALUES (1, '12', '22', '2025-11-30', '12:45', 1200.0, 5);
    ```
  - Daha güvenli: hash üret, sonra INSERT/UPDATE ile kullanıcı parolasını hash halinde yaz.

5) Test için kullanıcıya bakiye ekleme (SQL)
- Doğrudan örnek:
  - Windows PowerShell:
    ```powershell
    .\sqlite3.exe db.sqlite "UPDATE users SET credit = 5000 WHERE username='a';"
    .\sqlite3.exe db.sqlite "SELECT id, username, credit FROM users WHERE username='a';"
    ```
  - Unix:
    ```bash
    sqlite3 db.sqlite "UPDATE users SET credit = 5000 WHERE username='a';"
    sqlite3 db.sqlite "SELECT id, username, credit FROM users WHERE username='a';"
    ```

6) Test: bilet alma akışı
- Tarayıcıda:
  - Giriş: http://localhost:8000/login.php
  - Sefer detay: http://localhost:8000/sefer_detay.php?id=1
  - Bilet satın al: linkten bilet_al.php?sefer_id=1 seçip koltuk al

- DB kontrolü sonrası:
  - Biletleri listele:
    ```powershell
    .\sqlite3.exe db.sqlite "SELECT * FROM biletler ORDER BY id DESC LIMIT 20;"
    ```
  - Kullanıcı bakiyesini kontrol et:
    ```powershell
    .\sqlite3.exe db.sqlite "SELECT id, username, credit FROM users WHERE username='a';"
    ```

- Hash doğrulama false dönüyor (password_verify false)
  - Sebep: DB'deki hash bozuk/kısalmış.
  - DB'deki ham hash'i kontrol et (örnek PHP script `verify_db_password.php` kullan):
    ```powershell
    php verify_db_password.php admin_general
    ```
  - Varsa `set_password.php` ile güvenli hash yazın:
    ```powershell
    php set_password.php admin_general admin123
    ```

7) Logları takip et / hata ayıklama
- PHP hata logu (eğer `php_errors.log` kullanıyorsanız):
  - PowerShell:
    ```powershell
    Get-Content .\php_errors.log -Wait
    # veya son 200 satır
    Get-Content .\php_errors.log -Tail 200
    ```
  - Unix:
    ```bash
    tail -f php_errors.log
    tail -n 200 php_errors.log
    ```

8) Sık kullanılan SQL sorgu/komut listesi (hepsi tek satır)
- Tabloları listele:
  ```powershell
  .\sqlite3.exe db.sqlite ".tables"
  ```
- users tablosunu kontrol et:
  ```powershell
  .\sqlite3.exe db.sqlite "SELECT id,username,role,credit,length(password) as pw_len FROM users;"
  ```
- Seferleri listele:
  ```powershell
  .\sqlite3.exe db.sqlite "SELECT * FROM sefers;"
  ```
- Biletleri listele:
  ```powershell
  .\sqlite3.exe db.sqlite "SELECT * FROM biletler ORDER BY id DESC LIMIT 50;"
  ```

Son notlar
- README içindeki komutlar doğrudan çalıştırılabilir şekilde yazıldı; Windows PowerShell ve Unix farkları belirtildi. Her komutu çalıştırmadan önce proje kökünde (`cd` ile) olduğunuzdan emin olun.
- Production için:
  - display_errors kapatın,
  - hassas loglamaları kaldırın,
  - gerçek ödeme sağlayıcı entegrasyonu yapın (webhook doğrulama),
  - parola sıfırlama/unutulan parola akışı uygulayın.
